class PathwayScores(Dataset):

    def __init__(self, csv_file):
        """Initializes instance of class PathwayScores.

        Args:
            csv_file (str): Path to the csv file with the data.

        """
        self.df = pd.read_csv(csv_file, sep='\t')
        self.df = self.df[self.df["PAM50"] != "NC"]

        # Grouping variable namesdict( enumerate(train['PAM50'].cat.categories ) ) 
        self.features = ['Cell_Cycle', 'HIPPO', 'MYC', 'NOTCH', 'NRF2', 'PI3K', 'TGF.Beta', 'RTK_RAS', 'TP53', 'WNT', 'Hypoxia', 'SRC', 'ESR1', 'ERBB2']
        self.target = "PAM50"
        
        self.df['PAM50'] = self.df['PAM50'].astype('category')
        self.df['PAM50'] = self.df['PAM50'].cat.codes.values

        # Save target and predictors
        self.X = self.df.loc[:, self.features].values
        self.y = self.df.loc[:, self.target].values

        self.transform = transforms.Compose([transforms.ToTensor()]) 

    def __len__(self):
        return len(self.df)

    def __getitem__(self, idx):
        if isinstance(idx, torch.Tensor):
            idx = idx.tolist()

        return [self.transform(self.X.iloc[idx].values), self.transform(self.y[idx])]
